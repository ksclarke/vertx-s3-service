
package info.freelibrary.vertx.s3;

import static info.freelibrary.util.Constants.COMMA;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.Set;

import io.vertx.core.MultiMap;

/**
 * HTTP headers and methods to support working with them.
 */
public class HttpHeaders implements io.vertx.core.http.HttpHeaders {

    private static final String HEADER_PATTERN = String.join("|", ACCEPT, ACCEPT_CHARSET, ACCEPT_ENCODING,
            ACCEPT_LANGUAGE, CONNECTION, ACCESS_CONTROL_ALLOW_HEADERS, ACCESS_CONTROL_ALLOW_METHODS,
            ACCESS_CONTROL_ALLOW_ORIGIN, ACCESS_CONTROL_EXPOSE_HEADERS, ACCESS_CONTROL_REQUEST_HEADERS,
            CONTENT_LANGUAGE, ACCESS_CONTROL_REQUEST_METHOD);

    private final MultiMap myMultiMap;

    /**
     * Creates a new HttpHeaders object.
     */
    public HttpHeaders() {
        myMultiMap = io.vertx.core.http.HttpHeaders.headers();
    }

    /**
     * Creates a new HttpHeaders object.
     *
     * @param aMap A map of header names and values
     */
    public HttpHeaders(final Map<String, String> aMap) {
        myMultiMap = io.vertx.core.http.HttpHeaders.headers();
        this.addAll(aMap);
    }

    /**
     * Creates a new HttpHeaders object from a Vert.x MultiMap.
     *
     * @param aMultiMap A MultiMap generated by Vert.x
     */
    HttpHeaders(final MultiMap aMultiMap) {
        myMultiMap = aMultiMap;
    }

    /**
     * Gets the value of the supplied header.
     *
     * @param aName A header name
     * @return The value of a requested header
     */
    public String get(final CharSequence aName) {
        return myMultiMap.get(aName);
    }

    /**
     * Gets all the values of the supplied header name. If a header is comma delimited, those values are returned
     * separate strings.
     *
     * @param aName A header name
     * @return The values of the requested header
     */
    public List<String> getAll(final CharSequence aName) {
        final String name = aName.toString().toLowerCase();
        final List<String> list = new ArrayList<>();

        if (name.matches(HEADER_PATTERN)) {
            for (final String values : myMultiMap.getAll(aName)) {
                for (final String value : values.split(COMMA)) {
                    list.add(value);
                }
            }
        } else {
            list.addAll(myMultiMap.getAll(aName));
        }

        return list;
    }

    /**
     * Tests whether the headers contain a header for the supplied name.
     *
     * @param aName A header name
     * @return True if the headers contain the supplied header name; else, false
     */
    public boolean contains(final CharSequence aName) {
        return myMultiMap.contains(aName);
    }

    /**
     * Tests whether there are any headers.
     *
     * @return True if there are no headers; else, false
     */
    public boolean isEmpty() {
        return myMultiMap.isEmpty();
    }

    /**
     * Gets the names of all the headers.
     *
     * @return The names of all the headers
     */
    public Set<String> names() {
        return myMultiMap.names();
    }

    /**
     * Adds the supplied header.
     *
     * @param aName A header name
     * @param aValue A header value
     * @return The headers
     */
    public HttpHeaders add(final CharSequence aName, final CharSequence aValue) {
        myMultiMap.add(aName, aValue);
        return this;
    }

    /**
     * Adds all the headers in the supplied HttpHeaders.
     *
     * @param aHeaders A headers object
     * @return The headers
     */
    public HttpHeaders addAll(final HttpHeaders aHeaders) {
        myMultiMap.addAll(aHeaders.myMultiMap);
        return this;
    }

    /**
     * Adds all the headers in the supplied map.
     *
     * @param aHeadersMap A map of headers
     * @return The headers
     */
    public HttpHeaders addAll(final Map<String, String> aHeadersMap) {
        myMultiMap.addAll(aHeadersMap);
        return this;
    }

    /**
     * Sets a header.
     *
     * @param aName A header name
     * @param aValue A header value
     * @return The headers
     */
    public HttpHeaders set(final CharSequence aName, final CharSequence aValue) {
        myMultiMap.set(aName, aValue);
        return this;
    }

    /**
     * Sets all the supplied headers.
     *
     * @param aHeaders A headers object
     * @return The headers
     */
    public HttpHeaders setAll(final HttpHeaders aHeaders) {
        myMultiMap.setAll(aHeaders.myMultiMap);
        return this;
    }

    /**
     * Sets all the headers in the supplied map.
     *
     * @param aHeaders A map of headers
     * @return The headers
     */
    public HttpHeaders setAll(final Map<String, String> aHeaders) {
        myMultiMap.setAll(aHeaders);
        return this;
    }

    /**
     * Remove the supplied header.
     *
     * @param aName A name of a header
     * @return The headers
     */
    public HttpHeaders remove(final CharSequence aName) {
        myMultiMap.remove(aName);
        return this;
    }

    /**
     * Clears all the headers.
     *
     * @return The empty headers
     */
    public HttpHeaders clear() {
        myMultiMap.clear();
        return this;
    }

    /**
     * The number of headers.
     *
     * @return The number of headers
     */
    public int size() {
        return myMultiMap.size();
    }

    @Override
    public String toString() {
        return myMultiMap.toString();
    }
}
